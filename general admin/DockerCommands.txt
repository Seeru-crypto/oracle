Image commands
  To build a new image, cd to the Dockerfile location and enter the command: docker build -t <ImageName>:<Version> .
      -t flags our newly created image with a identifier tag for easier comprehension
      The . at the end tells docker where our Dockerfile is located . means in the same directory, ".." means in the parent directory ect
      The space after the : is reserved for versioning, so V1, V2 ect


  To create and run a new container:   docker run --name <ContainerName> -dp 3000:3000 <ImageName>:<ImageVersion>
      Where -p routes the application port to the main machines port for example 80:8080 will route all port 80 requests into port 8080 on the main machine and will
      be accesable via localhost:8080.
      -d detached mode, so that the app can run in the background
      --name newly created container tag
            OR
      you can also run docker run -d -p 3000:3000 <ImageName>:<ImageVersion>


  To see all the images: docker images


  Delete All Your Containers
  To delete all your containers, run:

  $ docker ps -q -a | xargs docker rm

  Delete All Untagged Images
  This requires a little bit of Linux magic (like deleting all containers above). Docker marks images without tags with "<none>" so we need to process only those images. Run the following command from your terminal (the awk programming language gives you text manipulation tools):

  docker rmi $(docker images | grep "<none>" | awk '{print $3}')


  Delete All Images
  To delete all of your images, you can simplify the command above:

  docker rmi $(docker images | awk '{print $3}')





Container commands
  To run a existing container: docker start <ContainerName>
  To stop a running container: docker stop <ContainerName>



  To test a running container: curl localhost:<PortNr>
      It will send a get request to the running localhost and display all the info, it recieves
  To see all running containers: docker ps
  To see all existing containers: docker ps -a



    DOCKER COPY VS ADD

  Due to some functionality issues, Docker had to introduce an additional command for duplicating content – COPY.

  Unlike its closely related ADD command, COPY only has only one assigned function. Its role is to duplicate files/directories in a specified location in their existing format. This means that it doesn’t deal with extracting a compressed file, but rather copies it as-is.

  The instruction can be used only for locally stored files. Therefore, you cannot use it with URLs to copy external files to your container.







docker build -t tester:v3 .
docker run --name testing_server3 -dp 5000:5000 tester:v3
